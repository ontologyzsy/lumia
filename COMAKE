#edit-mode: -*- python -*-
#coding:utf-8

#工作路径.
WORKROOT('../../../')

#使用硬链接copy.
CopyUsingHardLink(True)

#支持32位/64位平台编译
#ENABLE_MULTI_LIBS(True)

#C预处理器参数.
CPPFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1791d98260619702e7e7e27102510d02b4a846a5\\\" -D_BD_KERNEL_')
#为32位目标编译指定额外的预处理参数
#CPPFLAGS_32('-D_XOPEN_SOURE=500')

#C编译参数.
CFLAGS('-g -pipe -W -Wall -Werror -fPIC')

#C++编译参数.
CXXFLAGS('-g -pipe -W -Wall -fPIC')

# protoc
PROTOC('../../../third-64/protobuf/bin/protoc')

#头文件路径.
INCPATHS('. ./src ./src/proto ./output/include ./common/include ./ins/sdk/ ./src/galaxy/ ../../../public/noah/meta-query/meta-query-sdk-c/include/metaquery/')

#使用库
LIBS('./common/libcommon.a ./ins/libins_sdk.a ../../../public/noah/meta-query/meta-query-sdk-c/output/lib/libmetaquery.a')

#链接参数.
LDFLAGS('-lpthread -lz -ldl -lcrypto -lrt -lidn -lssl -lldap')

#依赖模块
CONFIGS('public/sofa-pbrpc@trunk@comake')
CONFIGS('thirdsrc/protobuf@2.6.2.0')
CONFIGS('third-64/boost@1.63.0.101')
CONFIGS('third-64/libcurl@base')
CONFIGS('third-64/gflags@gflags_2-0-0-100_PD_BL')
CONFIGS('bdg/log/build-64/libs/thirdparty/rapidjson@1.0.0.0')
CONFIGS('third-64/leveldb@base')
CONFIGS('public/noah/giano-lib/release/baas-lib-c@ci-base')
CONFIGS('public/noah/meta-query/meta-query-sdk-c@meta-query-sdk-c_1-0-0-0_PD_BL')

lumia_ctrl_src = 'src/ctrl/lumia_ctrl_main.cc\
                src/ctrl/lumia_ctrl_impl.cc\
                src/proto/lumia.proto\
                src/proto/agent.proto\
                src/flags.cc\
                src/ctrl/minion_ctrl.cc\
                src/ctrl/http_client.cc\
                src/ctrl/lumia_ctrl_util.cc\
                src/galaxy/galaxy.cc\
                src/proto/galaxy.proto\
                src/proto/master.proto'

lumia_sdk_src = 'src/sdk/lumia.cc\
                 src/proto/lumia.proto\
                 src/proto/agent.proto'

lumia_client_src = 'src/client/lumia_client.cc\
                    src/sdk/lumia.cc\
                    src/proto/lumia.proto\
                    src/proto/agent.proto\
                    src/flags.cc'

lumia_agent_src = 'src/agent/lumia_agent.cc\
                  src/agent/lumia_agent_main.cc\
                  src/flags.cc\
                  src/proto/agent.proto\
                  src/proto/lumia.proto'

lumia_headers = 'src/sdk/lumia.h'
StaticLibrary('lumia',Sources(lumia_sdk_src),HeaderFiles(lumia_headers))
Application('lumia_ctrl',Sources(lumia_ctrl_src))
Application('lumia',Sources(lumia_client_src))
Application('lumia_agent',Sources(lumia_agent_src))

