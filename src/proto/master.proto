import "galaxy.proto";

package baidu.galaxy;

option cc_generic_services = true;


enum JobType {
    kLongRun = 0;
    kBatch = 1;
    kSystem = 2;
}

enum JobPriority {
    kMonitor = 75;
    kOnline = 50;
    kOffline = 25;
    kBestEffort = 0;
}

enum JobState {
    kJobNormal = 0;
    kJobTerminated = 2;
}

enum JobUpdateState {
    kUpdateNormal = 0;
    kUpdateSuspend = 1;
}

enum ScheduleAction {
   kLaunch = 0;
   kTerminate = 1;
}


message JobDescriptor {
    optional string name = 1;
    optional string user = 2;
    optional JobType type = 3;
    optional int32 priority = 4;
    optional PodDescriptor pod = 5;
    repeated string labels = 6;
    optional int32 replica = 7;
    optional int32 deploy_step = 8;
}

message JobInfo {
    optional string jobid = 1;
    optional JobDescriptor desc = 2;
    repeated PodStatus pods = 3;
    optional JobState state = 4;
    optional JobUpdateState update_state = 5;
    // per version per PodDescriptor
    repeated PodDescriptor pod_descs = 6;
    // pod latest pod descriptor
    optional string latest_version = 7;
}

message ScheduleInfo {
    optional string endpoint = 1;
    optional string jobid = 2;
    optional string podid = 3;
    optional ScheduleAction action = 4;
    optional int32 agent_version = 5;
}


message UserDescriptor {
    optional string username = 1;
}

message SubmitJobRequest {
    optional JobDescriptor job = 1;
}

message SubmitJobResponse {
    optional Status status = 1;
    optional string jobid = 2;
}

message UpdateJobRequest {
    optional string jobid = 1;
    optional JobDescriptor job = 2;
}

message UpdateJobResponse {
    optional Status status = 1;
}

message SuspendJobRequest {
    optional string jobid = 1;
}

message SuspendJobResponse {
    optional Status status = 1;
}

message ResumeJobRequest {
    optional string jobid = 1;
}

message ResumeJobResponse {
    optional Status status = 1;
}

message TerminateJobRequest {
    optional string jobid = 1;
}

message TerminateJobResponse {
    optional Status status = 1;
}

message ListJobsRequest {

}

message JobOverview {
    optional JobDescriptor desc = 1;
    optional string jobid = 2;
    optional JobState state = 3;
    optional int32 running_num = 4;
    optional Resource resource_used = 5;
    optional int32 pending_num = 6;
    optional int32 deploying_num = 7;
}

message ListJobsResponse {
    optional Status status = 1;
    repeated JobOverview jobs = 2;
}

message ShowJobRequest {
    repeated string jobsid = 1;
}

message ShowJobResponse {
    optional Status status = 1;
    repeated JobInfo jobs = 2;
}

message HeartBeatRequest {
    optional string endpoint = 1;
}

message HeartBeatResponse {
}

message SwitchSafeModeRequest {
    optional bool enter_or_leave = 1;
}

message SwitchSafeModeResponse {
    optional Status status = 1;
}


message GetPendingJobsRequest {
    optional int32 max_scale_down_size = 4;
    optional int32 max_scale_up_size = 5;
    optional int32 max_need_update_job_size = 6;
}

message GetPendingJobsResponse {
    repeated JobInfo scale_up_jobs = 1;
    repeated JobInfo scale_down_jobs = 2;
    repeated JobInfo need_update_jobs = 3;
    optional Status status = 4;
}

message DiffVersion {
   optional int32 version = 1;
   optional string endpoint = 2;
}


message GetResourceSnapshotRequest {
   repeated DiffVersion versions = 1;
}


message GetResourceSnapshotResponse {
    optional Status status = 1;
    repeated AgentInfo agents = 2;
    repeated string deleted_agents = 3;
}

message ProposeRequest {
    repeated ScheduleInfo schedule = 1;
}

message ProposeResponse {
    optional Status status = 1;
    // 返回给调度器最新agent状态信息
    repeated AgentInfo agents = 2;
}

message ListAgentsRequest {

}

message ListAgentsResponse {
    optional Status status = 1;
    repeated AgentInfo agents = 2;
}

// for persistence
message LabelCell {
    optional string label = 1;
    repeated string agents_endpoint = 2;
}

message LabelAgentRequest {
    optional LabelCell labels = 1;
}

message LabelAgentResponse {
    optional Status status = 1;
}

message ShowPodRequest {
    optional string jobid = 1;
}

message PodOverview {
    optional string jobid = 1;
    optional string podid = 2;
    optional Resource used = 3;
    optional Resource assigned = 4;
    optional PodStage stage = 5;
    optional PodState state = 6;
    optional string version = 7;
    optional string endpoint = 8;
}

message ShowPodResponse {
    repeated PodOverview pods = 1;
    optional Status status = 2;
}

message GetMasterStatusRequest {}

message GetMasterStatusResponse {
    optional bool safe_mode = 2;

    // agent
    optional int32 agent_total = 3;
    optional int32 agent_live_count = 4;
    optional int32 agent_dead_count = 5;

    // cpu
    optional int64 cpu_total = 6;
    optional int64 cpu_used = 7;
    optional int64 cpu_assigned = 8;

    // mem
    optional int64 mem_total = 9;
    optional int64 mem_used = 10;
    optional int64 mem_assigned = 11;

    // job
    optional int32 job_count = 12;
    optional int64 pod_count = 13;
    optional int64 scale_up_job_count = 14;
    optional int64 scale_down_job_count = 15;
    optional int64 need_update_job_count = 16;

    optional Status status = 17;
}


service Master {
    rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse);
    rpc UpdateJob(UpdateJobRequest) returns (UpdateJobResponse);
    rpc SuspendJob(SuspendJobRequest) returns (SuspendJobResponse);
    rpc ResumeJob(ResumeJobRequest) returns (ResumeJobResponse);
    rpc TerminateJob(TerminateJobRequest) returns (TerminateJobResponse);
    rpc ShowJob(ShowJobRequest) returns (ShowJobResponse);
    rpc ShowPod(ShowPodRequest) returns (ShowPodResponse);
    rpc ListJobs(ListJobsRequest) returns (ListJobsResponse);
    rpc GetStatus(GetMasterStatusRequest) returns (GetMasterStatusResponse);

    rpc HeartBeat(HeartBeatRequest) returns (HeartBeatResponse);

    rpc SwitchSafeMode(SwitchSafeModeRequest) returns (SwitchSafeModeResponse);

    // rpc AddUser() returns ();
    // rpc DeleteUser() returns ();
    // rpc UpdateUser() returns ();
    // rpc ListUsers() returns ();

    rpc GetPendingJobs(GetPendingJobsRequest) returns (GetPendingJobsResponse);
    rpc GetResourceSnapshot(GetResourceSnapshotRequest) returns (GetResourceSnapshotResponse);
    rpc Propose(ProposeRequest) returns (ProposeResponse);

    rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse);
    rpc LabelAgents(LabelAgentRequest) returns (LabelAgentResponse);
}
